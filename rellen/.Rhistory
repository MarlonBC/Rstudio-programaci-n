flights%>%filter(dest==c("HOU","IAH"))
Detino_HOU_y_IAH<-flights%>%filter(dest==c("HOU","IAH"))
Detino_HOU<-flights%>%filter(dest=="HOU")
View(Detino_HOU)
Detino_HOU_y_IAH<-flights%>%filter(dest==c("HOU","IAH"))
View(Detino_HOU_y_IAH)
#Volaron a Houston (IAH oHOU)
Detino_HOU_y_IAH<-flights%>%group_by(dest) %>% filter(dest==c("HOU","IAH"))
View(Detino_HOU_y_IAH)
flights%>%filter(dest==c("HOU","IAH"))%>%group_by(dest)
#Volaron a Houston (IAH oHOU)
Detino_HOU_y_IAH<-flights%>%filter(dest==c("HOU","IAH"))%>%group_by(dest)
View(Detino_HOU_y_IAH)
#Volaron a Houston (IAH oHOU)
Detino_HOU_y_IAH<-flights%>%filter(dest==c("HOU","IAH"))%>%group_by(dest)
View(Detino_HOU_y_IAH)
#Volaron a Houston (IAH oHOU)
Detino_HOU_y_IAH<-flights%>%filter(dest==c("HOU","IAH"))
View(Detino_HOU_y_IAH)
Detino_HOU_y_IAH %>% group_by(dest)
view(Detino_HOU_y_IAH %>% group_by(dest))
flights%>%filter(dest=="HOU","IAH")
Vuelos_2hde_retraso<-flights%>%filter(arr_delay>=120)
#Nuemro de vuelos con 2h a más horas de retraso
count(Vuelos_2hde_retraso)
flights%>%group_by(time_hour)
View(flights%>%group_by(time_hour))
View(flights%>%group_by(time_hour))
flights%>%filter(time_hour=="2013-01-02 15:00:00")%>%group_by(time_hour)
View(flights%>%filter(time_hour=="2013-01-02 15:00:00")%>%group_by(time_hour))
View(flights%>%filter(time_hour=="2013-07-02")%>%group_by(time_hour))
View(flights%>%filter(time_hour=="2013-07-02")%>%group_by(time_hour))
##Tuvieron un retraso de llegada de dos o más horas
library(lubridate)
flights%>%group_by(time_hour$month)
flights$month
month(flights$month==7)
month(flights$month=="7")
month(flights$month=="7")
month(flights$month=7)
month(flights$month="7")
month(flights$time_hour)
month(flights)
month(flights)
month(flights$time_hour=="7")
flights%>%group_by(time_hour) %>%filter(month(flights$time_hour)=="7" )
which(month(flights$time_hour)=="7" )
flights[which(month(flights$time_hour)=="7" )]
flights[which(month(flights$time_hour)=="7")]
month(flights$time_hour)
flights%>%group_by(time_hour) %>%filter(month(flights$time_hour)=="7")
flights%>%group_by(time_hour) %>%filter(month(flights$time_hour)=="7")
month(flights$time_hour)=="7"
month(flights$time_hour)=="07"
which(month(flights$time_hour)=="07")
flights%>%group_by(time_hour) %>%filter(month(flights$time_hour)=="7")
flights%>%group_by(time_hour) %>%filter(month(flights$time_hour)=="07")
flights%>%group_by(time_hour) %>%filter(month(flights$time_hour)=="01")
flights%>%group_by(time_hour) %>%filter(month(flights)=="01")
month(flights)=="01"
month(flights$time_hour)=="01"
month(flights$time_hour)="01"
month(flights$time_hour)=01
month(flights$time_hour)
View(flights)
flights%>%filter(arr_delay>=120)
Vuelos_2hde_retraso<-flights%>%filter(arr_delay>=120)
count(Vuelos_2hde_retraso)
#Volaron a Houston (IAH oHOU)
Detino_HOU_y_IAH<-flights%>%filter(dest==c("HOU","IAH"))
View(Detino_HOU_y_IAH)
View(flights%>%group_by(time_hour))
flights%>%group_by(time_hour) %>%mutate(month())
flights%>%group_by(time_hour) %>%mutate(meses=month(flights$origin))
flights%>%group_by(time_hour) %>%mutate(meses=month(flights$time_hour))
month(flights$time_hour)
flights%>%group_by(time_hour)%>%mutate(meses=month(flights$time_hour))
meses=month(flights$time_hour)
month(flights$time_hour)
flights%>%group_by(time_hour$month)
flights%>%group_by(time_hour)
flights%>%group_by(month)
View(flights%>%group_by(month))
flights%>%filter(flight$month=="7")
flights%>%filter(flight$month=="7")
flights%>%group_by(time_hour)%>%mutate(meses=month(flights$time_hour))
month(flights$time_hour)
flights%>%group_by(time_hour)%>%mutate(meses=month(flights$time_hour))
month(flights)
month(flights$time_hour)
flights%>%group_by(month)
flights%>%group_by(time_hour)%>%
flights%>%filter(month=<9 & month>=7)
flights%>%filter(month=<9 & month>=7)
flights%>%filter(month=<"9" & month>="7")
flights%>%filter(month<9 & month>7)
flights%>%filter(month<10 & month>6)
View(flights%>%filter(month<10 & month>6))
Vuelos_2hde_retraso<-flights%>%filter(arr_delay>=120)
#Volaron a Houston (IAH oHOU)
Detino_HOU_y_IAH<-flights%>%filter(dest==c("HOU","IAH"))
#Fueron operados por United, American o Delta
destino_miami<- filter(flights,dest == "MIA")
Salida_invierno<-flights%>%filter(month<10 & month>6)
View(flights)
flights%>%filter(arr_delay>=120 & dep_delay=0)
flights%>%filter(arr_delay>=120 & dep_delay = 0)
flights
flights%>%filter(arr_delay>=120 ,dep_delay = 0)
flights%>%filter(arr_delay>=120 ,dep_delay == 0)
#Llegaron más de dos horas tarde, pero no salieron tarde
Vuelos_2hde_retraso %>% filter(dep_delay==0)
#Llegaron más de dos horas tarde, pero no salieron tarde
Vuelos_2hde_retraso %>% filter(dep_delay==0)== Vuelos_2hde_retraso<-flights%>%filter(arr_delay>=120 ,dep_delay == 0)
Vuelos_2hde_retraso %>% filter(dep_delay==0)== flights%>%filter(arr_delay>=120 ,dep_delay == 0)
#Llegaron más de dos horas tarde, pero no salieron tarde
Vuelos_2hde_retraso %>% filter(dep_delay==0)==
Vuelos_2hde_retraso<-flights%>%filter(arr_delay>=120 & dep_delay == 0)
#Llegaron más de dos horas tarde, pero no salieron tarde
Vuelos_2hde_retraso %>% filter(dep_delay==0)
flights%>%filter(arr_delay>=120 & dep_delay == 0)
#Llegaron más de dos horas tarde, pero no salieron tarde
Vuelos_2hde_retraso %>% filter(dep_delay==0)== flights%>%filter(arr_delay>=120 & dep_delay == 0)
Vuelos_2hde_retraso<-flights%>%filter(arr_delay>=120)
flights%>%filter(arr_delay>120 & dep_delay == 0)
#Llegaron más de dos horas tarde, pero no salieron tarde
flights%>%filter(arr_delay>120, dep_delay == 0)
Vuelos_2hde_retraso_llegar<-flights%>%filter(arr_delay>=120)
count(Vuelos_2hde_retraso_llegar)
#Llegaron más de dos horas tarde, pero no salieron tarde
Vuelos_masde2h_retraso_llegar_0_salir<-flights%>%filter(arr_delay>120, dep_delay == 0)
flights%>%filter(arr_delay>=60)
flights%>%filter(arr_delay>=60,air_time==30)
ret_60_aire_30<-flights%>%filter(arr_delay>=60,air_time==30)
#Se retrasaron por lo menos una hora, pero repusieron más de 30 minutos en vuelo
View(ret_60_aire_30)
ret_60_aire_30<-flights%>%filter(arr_delay>=60,air_time>=30)
flights%>%filter(hour<6 | hour>23)
vuelo_12pm_6am<-flights%>%filter(hour<6 | hour>23)
#Partieron entre la medianoche y las 6 a.m. (incluyente)
View(vuelo_12pm_6am)
vuelo_12pm_6am<-flights%>%filter(hour=<6 | hour>=23)
#Partieron entre la medianoche y las 6 a.m. (incluyente)
View(vuelo_12pm_6am)
vuelo_12pm_6am<-flights%>%filter(hour=<6 | hour=>23)
vuelo_12pm_6am<-flights%>%filter(hour<=6 | hour>=23)
#Partieron entre la medianoche y las 6 a.m. (incluyente)
View(vuelo_12pm_6am)
vuelo_12pm_6am<-flights%>%filter(hour<=6)
#Partieron entre la medianoche y las 6 a.m. (incluyente)
View(vuelo_12pm_6am)
between(1:12, 7, 9)
rnorm(1e2)
rnorm(1e2)
between(rnorm(1e2), -1, 1)
rnorm(1e2)
filter(starwars, between(height, 100, 150))
prueba<-filter(starwars, between(height, 100, 150))
#¿Puedes usarla para simplificar el código necesario para responder a los desafíos anteriores?
view(prueba)
#¿Puedes usarla para simplificar el código necesario para responder a los desafíos anteriores?
view(starwars)
#¿Puedes usarla para simplificar el código necesario para responder a los desafíos anteriores?
#Partieron entre la medianoche y las 6 a.m. (incluyente)
flights%>%filter(between(hour,0,6))
#¿Puedes usarla para simplificar el código necesario para responder a los desafíos anteriores?
#Partieron entre la medianoche y las 6 a.m. (incluyente)
vuelo_12pm_6am_2daforma<-flights%>%filter(between(hour,0,6))
View(vuelo_12pm_6am_2daforma)
NA^0
NA | TRUE
FALSE & NA
NA | FALSE
NA | TRUE
FALSE & NA
¡NA * 0
NA * 0
NA*0
NA*0
ret_60_aire_30<-flights %>% filter(atraso_salida >= 60 & atraso_salida - atraso_llegada > 30)
ret_60_aire_30<-flights %>% filter(dep_delay >= 60 & dep_delay - arr_delay > 30)
ret_60_aire_30
#Se retrasaron por lo menos una hora, pero repusieron más de 30 minutos en vuelo
View(ret_60_aire_30)
#Partieron en invierno del hemisferio sur (julio, agosto y septiembre)
Salida_invierno_2daforma<-flights%>%filter(month<10 & month>6)
Salida_invierno_2daforma
Salida_invierno<-flights%>%filter(month<10 & month>6)
Salida_invierno
#Partieron en invierno del hemisferio sur (julio, agosto y septiembre)
Salida_invierno_2daforma<-flights%>%filter(between(month,7,10))
Salida_invierno_2daforma
Salida_invierno_2daforma==Salida_invierno
Salida_invierno_2daforma == Salida_invierno
Salida_invierno<-flights%>%filter(month<10 & month>6)
Salida_invierno
#Partieron en invierno del hemisferio sur (julio, agosto y septiembre)
Salida_invierno_2daforma<-flights%>%filter(between(month,7,10))
Salida_invierno_2daforma
Salida_invierno_2daforma == Salida_invierno
#Partieron en invierno del hemisferio sur (julio, agosto y septiembre)
Salida_invierno_2daforma<-flights%>%filter(between(month,7,9))
Salida_invierno_2daforma
Salida_invierno_2daforma==Salida_invierno
#
flights %>% filter(is.na(sched_dep_time))
#
View(flights %>% filter(is.na(sched_dep_time)))
View(flights %>% filter(is.na(arr_time)))
#
View(flights %>% filter(is.na(dep_time)))
count(flights %>% filter(is.na(dep_time)))
#¿Cuántos vuelos tienen datos faltantes de `horario_salida`?
Vuelos_faltantes_NA<-flights %>% filter(is.na(dep_time))
count(Vuelos_faltantes_NA)
#¿Qué otras variables tienen valores faltantes?
in.na()
#¿Qué otras variables tienen valores faltantes?
in.na(flights)
#¿Qué otras variables tienen valores faltantes?
in.na(flights$sched_dep_time)
#¿Qué otras variables tienen valores faltantes?
is.na(flights)
#¿Qué otras variables tienen valores faltantes?
flights%>% is.na()
#¿Qué otras variables tienen valores faltantes?
flights %>% filter(is.na(dep_time))
file.choose()
is.na(flights)
is.na(flights)==TRUE
is.na(flights)==TRUE
filter(flights,is.na(flights)==TRUE)
View(filter(flights,is.na(flights)==TRUE))
View(filter(flights,is.na(flights)=TRUE))
View(filter(flights,is.na(flights)=F))
View(filter(flights,is.na(flights)==F))
View(filter(flights,is.na(flights)==T))
flights-filter(flights,is.na(flights)==F)
is.na(dep_time)
is.na(flights$dep_time)
count(is.na(flights$dep_time)==T)
count(is.na(flights$dep_time))
arrange(flights,desc(is.na(air_time)))
library(tidyverse)
library(nycflights13)
arrange(flights,desc(is.na(air_time)))
# ¿Cómo podrías usar `arrange()` para ordenar todos los valores faltantes al comienzo? (Sugerencia: usa `is.na()`)
View(arrange(flights,desc(is.na(air_time))))
arrange(vuelos, desc(atraso_salida))
# Ordena vuelos para encontrar los vuelos más retrasados. Encuentra los vuelos que salieron más temprano.
arrange(flights, desc(dep_delay))
View(arrange(flights, desc(dep_delay)))
# Parte 3: Dplyr - select
#Haz una lluvia de ideas sobre tantas maneras como sea posible para seleccionar dep_time, dep_delay, arr_time, and arr_delay de flights.
select(flights, starts_with("dep"), starts_with("arr"))
select(flights, ends_with("dep"), ends_with("arr"))
select(flights, ends_with("delay"), ends_with("time"))
select(flights, contains("delay"), contains("time"))
select(flights, contains("dep"), contains("arr"))
select(flights, contains("time"), contains("delay"))
select(flights, contains("dep"), contains("arr"))
#¿Qué sucede si incluyes el nombre de una variable varias veces en una llamada a select()?
selectflights %>% select(dep_time, dep_time, dep_time)
#¿Qué sucede si incluyes el nombre de una variable varias veces en una llamada a select()?
flights %>% select(dep_time, dep_time, dep_time)
names(flights)
#¿Qué hace la función any_of()? ¡¿Por qué podría ser útil en conjunto con este vector?
Quiero <- c ( "year",  "month",   "day" )
one_of(Quiero)
select(flights,one_of(Quiero))
select(flights,Quiero)
any_of(Quiero)
select(flights,any_of(Quiero))
659%/%100 *60
659%/%100
659%/%100 *60 +59
659%/%100 *60 +659 %% 100
24*60
(659 %/% 100 * 60 + 659 %% 100) %% 1440
659%/%100 *60 +659 %% 100
mutate(flights, salida_programada_min = (sched_dep_time %/% 100 * 60 + sched_dep_time %% 100) %% 1440)
mutate(flights, horario_salida_min = (dep_time %/% 100 * 60 + dep_time %% 100) %% 1440)
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
mutate(flights, horario_supuesto_vuelo = (sched_dep_time - sched_arr_time))
horario_supuesto_vuelo
flights$horario_supuesto_vuelo
flights$horario_supuesto_vuelo
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
Vuelos1<-mutate(flights, horario_supuesto_vuelo = (sched_dep_time - sched_arr_time))
Vuelos1
Vuelos1$horario_supuesto_vuelo
Vuelos1 %>% select(horario_supuesto_vuelo,air_time)
View(Vuelos1 %>% select(horario_supuesto_vuelo,air_time))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
Vuelos1<-mutate(flights, horario_supuesto_vuelo = (sched_arr_time-sched_dep_time))
View(Vuelos1 %>% select(horario_supuesto_vuelo,air_time))
#Las variables horario_salida y salida_programada tienen un formato conveniente para leer,
#pero es difícil realizar cualquier cálculo con ellas porque no son realmente números continuos.
#Transfórmalas hacia un formato más conveniente como número de minutos desde la medianoche.
View(mutate(flights, salida_programada_min = (sched_dep_time %/% 100 * 60 + sched_dep_time %% 100) %% 1440))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
dep_time-sched_dep_time
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
transmute(flights,DEP_delay=dep_time-sched_dep_time)
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
transmute(flights,DEP_delay=dep_time-sched_dep_time,dep_delay)
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=dep_time-sched_dep_time,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time-sched_dep_time)%% 100,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time-sched_dep_time)%/% 100,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time-sched_dep_time)%% 100,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=100-(dep_time-sched_dep_time)%% 100,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time %/% 100 * 60+sched_dep_time%% 100)%% 1440,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time - sched_dep_time)%% 1440,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time - sched_dep_time)%% 10,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time - sched_dep_time)%/%100*60,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time - sched_dep_time)%/%100,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
view(transmute(flights,DEP_delay=(dep_time - sched_dep_time)%%100,dep_delay))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
#¿Cómo quieres manejar los empates? Lee atentamente la documentación de min_rank().
View(arrange(flights, desc(dep_delay)))
#Encuentra los 10 vuelos más retrasados utilizando una función de ordenamiento.
#¿Cómo quieres manejar los empates? Lee atentamente la documentación de min_rank().
Vuelos2<-arrange(flights, desc(dep_delay))
names(Veulos2)
names(Vuelos2)
Vuelos[1:10,1:19]
Vuelos[1:10,1:19]
[1:10,]
Vuelos2[1:10,]
View(Vuelos2[1:10,])
min_rank(Vuelos2)
View(Vuelos2[1:10,])
p<-c(5,6,8,2,1,3)
min_rank(p)
p<-c(5,6,8,2,2,3)
min_rank(p)
p<-c(5,6,8,1,1,3)
min_rank(p)
p<-c(5,6,8,2,2,2,3)
min_rank(p)
p<-c(5,6,8,1,1,1,3)
min_rank(p)
1:3 + 1:10
1:3 + 1:10
c(1:3)+c(1:10)
c(1:3)+c(1:10)
c(1:3)+1
1:3 + 2:4
sin(pi/2)
# Coseno
cos(pi)
# Tangente
tan(pi/3)
atan(1.732051)
library(nycflights13)
library(tidyverse)
library(dplyr)
library(lubridate)
# Haz una lluvia de ideas de al menos 5 formas diferentes de evaluar las características de un retraso típico de un grupo de vuelos.
#Considera los siguientes escenarios:
#- Un vuelo llega 15 minutos antes 50% del tiempo, y 15 minutos tarde 50% del tiempo.
flights %>% filter((sched_arr_time - sched_dep_time)*0.5 - 15 = air_time)
# Haz una lluvia de ideas de al menos 5 formas diferentes de evaluar las características de un retraso típico de un grupo de vuelos.
#Considera los siguientes escenarios:
#- Un vuelo llega 15 minutos antes 50% del tiempo, y 15 minutos tarde 50% del tiempo.
flights %>% filter((sched_arr_time - sched_dep_time)*0.5 - 15 == air_time)
# Haz una lluvia de ideas de al menos 5 formas diferentes de evaluar las características de un retraso típico de un grupo de vuelos.
#Considera los siguientes escenarios:
#- Un vuelo llega 15 minutos antes 50% del tiempo, y 15 minutos tarde 50% del tiempo.
Vuelo_15_0.5min_antes<-flights %>% filter((sched_arr_time - sched_dep_time)*0.5 - 15 == air_time)
View(Vuelo_15_0.5min_antes)
flights %>% filter((sched_arr_time - sched_dep_time)*0.5 + 15 == air_time)
Vuelo_15_0.5min_tarde<-flights %>% filter((sched_arr_time - sched_dep_time)*0.5 + 15 == air_time)
filter(flights, arr_delay < 15) %>%
group_by(year, month, day) %>%
summarise(min15_antes = quantile(arr_delay, 0.5, na.rm = TRUE))
#- Un vuelo llega siempre 10 minutos tarde.
filter(flights, arr_delay = 10) %>%
group_by(year, month, day)
filter(flights, arr_delay = 10) %>%
group_by(year, month, day)
filter(flights, arr_delay = 10) %>%
group_by(year, month, day) %>%
summarise(min15_antes = quantile(arr_delay,, na.rm = TRUE))
#- Un vuelo llega siempre 10 minutos tarde.
filter(flights, arr_delay == 10) %>%
group_by(year, month, day)
#- Un vuelo llega siempre 10 minutos tarde.
flights %>% filter(arr_delay == 10) %>%
group_by(year, month, day) %>% select(year,month,day,arr_delay)
flights %>% filter(arr_delay == 10) %>%
group_by(year, month, day) %>%summarise(min10_antes = arr_delay)
filter(flights, arr_delay > 120) %>%
group_by(year, month, day) %>%
summarise(horas2_tarde = quantile(arr_delay, 0.01, na.rm = TRUE))
#- Un vuelo llega a tiempo en el 99% de los casos. 1% de las veces llega 2 horas tarde.
#¿Qué es más importante: retraso de la llegada o demora de salida?
filter(flights, arr_delay == 0) %>%
group_by(year, month, day) %>%
summarise(Atiempo = quantile(arr_delay, 0.99, na.rm = TRUE))
flights %>% summarise(na.rm=T)
flights %>% na.rm=T
#Sugiere un nuevo enfoque que te dé el mismo output que `no_cancelados %>%
#count(destino) y no_cancelado %>% count(codigo_cola, wt = distancia) (sin usar count())`.
#flights
na.omit(flights)
#Sugiere un nuevo enfoque que te dé el mismo output que `no_cancelados %>%
#count(destino) y no_cancelado %>% count(codigo_cola, wt = distancia) (sin usar count())`.
#flights
View(na.omit(flights))
No_cancelados<-na.omit(flights)
no_cancelados %>%
count(dest)
No_cancelados %>%
count(dest)
No_cancelado %>% count(tailnum, wt = distance)
No_cancelados %>% count(tailnum, wt = distance)
library(nycflights13)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
flights %>% filter(arr_delay == 0) %>%
group_by(year, month, day) %>%
summarise(Atiempo = quantile(arr_delay, 0.99, na.rm = TRUE))
flights %>% filter(arr_delay > 120) %>%
group_by(year, month, day) %>%
summarise(horas2_tarde = quantile(arr_delay, 0.01, na.rm = TRUE))
standardized_flights <- flights %>%
filter(!is.na(air_time)) %>%
group_by(dest, origin) %>%
mutate(
air_time_mean = mean(air_time),
air_time_sd = sd(air_time),
n = n()
) %>%
ungroup() %>%
mutate(air_time_standard = (air_time - air_time_mean) / (air_time_sd + 1))
standardized_flights
ggplot(standardized_flights, aes(x = air_time_standard)) +
geom_density()
standardized_flights %>%
arrange(air_time_standard) %>%
select(
carrier, flight, origin, dest, month, day,
air_time, air_time_mean, air_time_standard
) %>%
head(10) %>%
print(width = Inf)
standardized_flights2 <- flights %>%
filter(!is.na(air_time)) %>%
group_by(dest, origin) %>%
mutate(
air_time_median = median(air_time),
air_time_iqr = IQR(air_time),
n = n(),
air_time_standard = (air_time - air_time_median) / air_time_iqr)
ggplot(standardized_flights2, aes(x = air_time_standard)) +
geom_density()
standardized_flights2 %>%
arrange(air_time_standard) %>%
select(
carrier, flight, origin, dest, month, day, air_time,
air_time_median, air_time_standard
) %>%
head(10) %>%
print(width = Inf)
flights %>%
mutate(mph = distance/ (air_time / 60)) %>%
ggplot(aes(x = mph)) +
geom_histogram(binwidth = 10)
flights %>%
mutate(mph = distance / (air_time/ 60)) %>%
arrange(desc(mph)) %>%
select(mph, flight, carrier, flight, month, day, dep_time) %>%
head(5)
flights %>%
mutate(mph = distance / (air_time / 60)) %>%
arrange(desc(mph)) %>%
select(
origin, dest, mph, year, month, day, dep_time, flight, carrier,
dep_delay,arr_delay
)
air_time_delayed %>%
arrange(desc(air_time_delay)) %>%
select(
air_time_delay, carrier, flight,
origin, dest, year, month, day, dep_time,
air_time, air_time_min
) %>%
head() %>%
print(width = Inf)
air_time_delayed %>%
arrange(desc(air_time_delay)) %>%
select(
air_time_delay_pct, carrier, flight,
origin, dest, year, month, day, dep_time,
air_time, air_time_min
) %>%
head() %>%
print(width = Inf)
